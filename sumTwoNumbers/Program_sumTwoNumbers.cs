/* Код для программы сложения двух чисел
Определяем и уточняем условия
Теперь попробуем написать более сложную программу, а именно сложить два числа. С чего начинаются
все действия? Они начинаются с создания алгоритма. Казалось бы, есть одно число, есть второе число,
нужно их сложить, показать результат. Итак, каким образом звучит задача? Написать программу
сложения двух чисел. Но, прежде чем начать что-то писать, нужно кое-что уточнить. В первую очередь,
на каком языке программирования нужно написать приложение. Допустим, вы знаете язык C#, а
заказчику требуется программа на языке JavaScript. После уточнения языка программа, техническое
задание или функциональные требования, предъявляемые к этому приложению, звучат, как «написать
программу на языке С#, которая складывает два числа». Всё ли на этом? Оказывается, нет. Дальше
вспоминаем о том, что язык С# позволяет писать приложения для различных платформ. Это может быть
Windows или Mac OS, устройство интернета вещей или очки дополненной реальности Hello Wins и т. д.
Теперь, допустим, заказчик сказал, что это приложение должно работать на компьютерах под
управлением Windows и Mac OS. Соответственно, наши функциональные требования звучат, как
«написать программу на языке С# работающую на Windows и на Mac OS, которая складывает два
числа».
Дальше снова могут появиться уточнения, а именно, откуда берутся эти числа? Технически числа могут
вводиться из терминала, считываться из какого-то файла или забираться из какого-то сервиса или базы
данных и т. д. Вы должны чётко представлять, откуда у вас берутся данные. Производим уточнения, и
оно звучит, как «написать программу на языке С# для Windows и Mac OS, в которой пользователь
вводит два числа, или числа генерируются автоматически, или считываются из файла. Дальше получаем
их сумму». Всё ли на этом? И снова нет. Что значит «получаем сумму»? После того как складываем
числа, мы должны показать их сразу в терминал или, быть может, нужно сохранить куда-то в базу
данных или отправить какому-то телеграмм бот или ещё куда-то? Нужно понимать, что с этой суммой
дальше делать.
Соответственно, снова производим уточнение, добавляем что-то и после этого можем приниматься к
написанию программы. Но и это не всё. Проблема в том, что, с какими числами мы работаем? Из курса
математики вы помните, что есть натуральные, вещественные или рациональные числа и т. д. Так с
какими именно числами наше приложение должно работать. Ограничимся уточнением целых чисел.
Следующим этапом по аналогии с предыдущими проектами мы с вами должны будем описать алгоритм,
последовательность действий или блок-схему */

/*int numberA = 3;
int numberB = 5;
Console.WriteLine(numberA + numberB);
*/
// Либо с использованием дополнительной переменной resolt в которой будет храниться сумма

/*
int numberA = 3;
int numberB = 5;
int resolt = numberA + numberB;
Console.WriteLine(resolt);
*/
/* Команды-помощники программиста на C#. Генератор
псевдослучайных чисел
Учитывая тот факт, что мы будем писать много приложений, не всегда удобно всё вводить руками. В
некоторых случаях можно обратиться к вспомогательным инструментам. В частности, к генератору
псевдослучайных чисел. Он выглядит страшновато, но пока что вы можете читать этот оператор просто
как английский текст.
Итак, если я напишу new Random().Next(мin, маx), что это значит? Это значит, что я хочу новое
случайное следующее число в диапазоне от min до max-1. В модуле математики и информатики, вы,
наверное, вспоминали о том, что есть отрезки, интервалы, полуинтервалы. Так вот, «min, mаx» здесь
выступает полуинтервалом, в котором min будет включён в полуинтервал, а максимальное число будет
на единицу меньше. Обратите внимание, что Next выдаёт случайное целое число. То есть оператор new
Random ().Next(мin, маx) даст случайное целое число в полуинтервале [min, max-1] или [min, max]. */

int numberA = new Random().Next(1,9);
Console.WriteLine(numberA);
int numberB = new Random().Next(10, 12);
Console.WriteLine(numberB);
int resolt = numberA + numberB;
Console.WriteLine(resolt);   
